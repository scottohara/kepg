/*
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

*/

#include "xmltvbase.h"
#include <KIO/Job>
#include <KIO/FileJob>
#include <KFilterDev>
#include <KSharedConfig>
#include <QDomElement>
#include <KDebug>

XmlTvBase::XmlTvBase()
{    
  
}

XmlTvBase::~XmlTvBase()
{
    delete m_configGroup;    
}

void XmlTvBase::configGroup(QString groupName)
{
    m_configGroup = new KConfigGroup(KGlobal::config(), groupName);    
}

QString XmlTvBase::configGroup() const
{
    return m_configGroup->name();
}

QString XmlTvBase::configPrefix() const
{
    return CONFIG_PREFIX;
}

void XmlTvBase::fetch()
{
    kDebug();
    
    // Set up the HTTP GET
    KUrl url(URL);
    KIO::StoredTransferJob *stJob = KIO::storedGet(url, KIO::Reload, KIO::HideProgressInfo);
    if (!stJob) {
        kDebug() << "Cannot create an http GET request!";
        return;
    }
    
    // Add headers to make it a conditional GET
    stJob->addMetaData("customHTTPHeader", "If-Modified-Since: " + m_configGroup->readEntry(CONFIG_PREFIX + "LastModified", QString()));
    //job->addMetaData("customHTTPHeader", "If-None-Match: " + m_configGroup->readEntry(CONFIG_PREFIX + "ETag", QString()));		// Don't know whether this is actually returned?
    stJob->addMetaData("UserAgent", "User-Agent: kepg/1.0");
    
    // Start the download
    connect(stJob, SIGNAL(result(KJob*)), this, SLOT(slotFetch(KJob*)));
    stJob->start();    
}

void XmlTvBase::slotFetch(KJob *job)
{
    kDebug();
    
    // Cast to a StoredTransferJob
    KIO::StoredTransferJob *stJob = qobject_cast<KIO::StoredTransferJob *> (job);
    if (stJob->error()) {
	kDebug() << stJob->errorText();
	return;
    }
    
    // If we got a 200 OK response...
    if (stJob->queryMetaData("responsecode") == "200") {
      kDebug() << "Got new version (" + stJob->queryMetaData("responsecode") + ")";

      m_data = stJob->data();
      m_lastModified = stJob->queryMetaData("modified");

      // If the destination file doesn't exist, create it now
      QFile destFile(FILE_PATH);
      if (!destFile.exists()) {
	destFile.open(QIODevice::WriteOnly);
	destFile.close();
      }
            
      // Setup the destination file for writing
      KUrl url("file://" + FILE_PATH);
      KIO::FileJob *fJob = KIO::open(url, QIODevice::WriteOnly | QIODevice::Truncate | QIODevice::Text);
      if (!fJob) {
	  kDebug() << "Cannot create file handle!";
	  return;
      }

      // Open the destination file
      connect(fJob, SIGNAL(open(KIO::Job*)), this, SLOT(slotFileOpen(KIO::Job*)));
      connect(fJob, SIGNAL(written(KIO::Job*, KIO::filesize_t)), this, SLOT(slotFileWritten(KIO::Job*, KIO::filesize_t)));
      fJob->start();
    } else {
      kDebug() << "Using cached version (" + stJob->queryMetaData("responsecode") + ")";
      
      // Signal that we've finished
      emit fetched();
    }
}

void XmlTvBase::slotFileOpen(KIO::Job *job)
{
    kDebug();

    // Store the file handle
    m_destFile = qobject_cast<KIO::FileJob *> (job);
    if (m_destFile->error()) {
	kDebug() << m_destFile->errorText();
    }

    // Write the data to the destination
    m_destFile->write(m_data);
}

void XmlTvBase::slotFileWritten(KIO::Job *job, KIO::filesize_t written)
{
    kDebug();
    
    // Close the file
    m_destFile->close();
    
    // Save the lastModified & ETag values
    m_configGroup->writeEntry(CONFIG_PREFIX + "LastModified", m_lastModified);
    //configGroup->writeEntry(CONFIG_PREFIX + "ETag", stj->queryMetaData("expire-date"));		// Don't know whether this is actually returned?
    m_configGroup->sync();
    
    // Signal that we've finished
    emit fetched();
}

void XmlTvBase::read(QDomDocument *doc)
{
    kDebug();
    
    // Decompress the file
    KFilterDev *compressedDev = static_cast<KFilterDev *>(KFilterDev::deviceForFile(FILE_PATH, "application/x-gzip"));
    compressedDev->open(QIODevice::ReadOnly);

    // Load the XML into a DOM and get the list of channel elements
    doc->setContent(compressedDev);
    
    // Close the file now
    compressedDev->close();
    delete compressedDev;
}

#include "xmltvbase.moc"